// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../static/goscope/dist/goscope/3rdpartylicenses.txt
// ../static/goscope/dist/goscope/favicon.ico
// ../static/goscope/dist/goscope/index.html
// ../static/goscope/dist/goscope/main.js
// ../static/goscope/dist/goscope/polyfills.js
// ../static/goscope/dist/goscope/runtime.js
// ../static/goscope/dist/goscope/styles.css

package goscope

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// bindataStaticGoscopeDistGoscope3rdpartylicensestxt reads file data from disk. It returns an error on failure.
func bindataStaticGoscopeDistGoscope3rdpartylicensestxt() (*asset, error) {
	path := "/Users/joe/workspace/goscope/goscope/../static/goscope/dist/goscope/3rdpartylicenses.txt"
	name := "../static/goscope/dist/goscope/3rdpartylicenses.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticGoscopeDistGoscopeFaviconico reads file data from disk. It returns an error on failure.
func bindataStaticGoscopeDistGoscopeFaviconico() (*asset, error) {
	path := "/Users/joe/workspace/goscope/goscope/../static/goscope/dist/goscope/favicon.ico"
	name := "../static/goscope/dist/goscope/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticGoscopeDistGoscopeIndexhtml reads file data from disk. It returns an error on failure.
func bindataStaticGoscopeDistGoscopeIndexhtml() (*asset, error) {
	path := "/Users/joe/workspace/goscope/goscope/../static/goscope/dist/goscope/index.html"
	name := "../static/goscope/dist/goscope/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticGoscopeDistGoscopeMainjs reads file data from disk. It returns an error on failure.
func bindataStaticGoscopeDistGoscopeMainjs() (*asset, error) {
	path := "/Users/joe/workspace/goscope/goscope/../static/goscope/dist/goscope/main.js"
	name := "../static/goscope/dist/goscope/main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticGoscopeDistGoscopePolyfillsjs reads file data from disk. It returns an error on failure.
func bindataStaticGoscopeDistGoscopePolyfillsjs() (*asset, error) {
	path := "/Users/joe/workspace/goscope/goscope/../static/goscope/dist/goscope/polyfills.js"
	name := "../static/goscope/dist/goscope/polyfills.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticGoscopeDistGoscopeRuntimejs reads file data from disk. It returns an error on failure.
func bindataStaticGoscopeDistGoscopeRuntimejs() (*asset, error) {
	path := "/Users/joe/workspace/goscope/goscope/../static/goscope/dist/goscope/runtime.js"
	name := "../static/goscope/dist/goscope/runtime.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataStaticGoscopeDistGoscopeStylescss reads file data from disk. It returns an error on failure.
func bindataStaticGoscopeDistGoscopeStylescss() (*asset, error) {
	path := "/Users/joe/workspace/goscope/goscope/../static/goscope/dist/goscope/styles.css"
	name := "../static/goscope/dist/goscope/styles.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"../static/goscope/dist/goscope/3rdpartylicenses.txt": bindataStaticGoscopeDistGoscope3rdpartylicensestxt,
	"../static/goscope/dist/goscope/favicon.ico":          bindataStaticGoscopeDistGoscopeFaviconico,
	"../static/goscope/dist/goscope/index.html":           bindataStaticGoscopeDistGoscopeIndexhtml,
	"../static/goscope/dist/goscope/main.js":              bindataStaticGoscopeDistGoscopeMainjs,
	"../static/goscope/dist/goscope/polyfills.js":         bindataStaticGoscopeDistGoscopePolyfillsjs,
	"../static/goscope/dist/goscope/runtime.js":           bindataStaticGoscopeDistGoscopeRuntimejs,
	"../static/goscope/dist/goscope/styles.css":           bindataStaticGoscopeDistGoscopeStylescss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"..": {Func: nil, Children: map[string]*bintree{
		"static": {Func: nil, Children: map[string]*bintree{
			"goscope": {Func: nil, Children: map[string]*bintree{
				"dist": {Func: nil, Children: map[string]*bintree{
					"goscope": {Func: nil, Children: map[string]*bintree{
						"3rdpartylicenses.txt": {Func: bindataStaticGoscopeDistGoscope3rdpartylicensestxt, Children: map[string]*bintree{}},
						"favicon.ico":          {Func: bindataStaticGoscopeDistGoscopeFaviconico, Children: map[string]*bintree{}},
						"index.html":           {Func: bindataStaticGoscopeDistGoscopeIndexhtml, Children: map[string]*bintree{}},
						"main.js":              {Func: bindataStaticGoscopeDistGoscopeMainjs, Children: map[string]*bintree{}},
						"polyfills.js":         {Func: bindataStaticGoscopeDistGoscopePolyfillsjs, Children: map[string]*bintree{}},
						"runtime.js":           {Func: bindataStaticGoscopeDistGoscopeRuntimejs, Children: map[string]*bintree{}},
						"styles.css":           {Func: bindataStaticGoscopeDistGoscopeStylescss, Children: map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
